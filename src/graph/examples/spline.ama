|| Dick Bruin, 05/04/1999
|| Splines

eps = 0.015

newPoint (x1, y1) (x2, y2) (n0, ps)
= (n, take n ps ++ [(x2, y2)] ++ drop (n+1) ps) ,if ns ~= [] 
= (n0, take n0 ps ++ [(x2, y2)] ++ drop n0 ps) 
where
  ns = [n | (x, y), n <- ps, [0..]; abs(x-x1) < eps /\ abs(y-y1) < eps]
  n = hd ns

deletePoint (n, ps)
= (0, take n ps ++ drop (n+1) ps)

drawSpline b n ps
= graphicsout
  (
    [GraphRectangle 14 (-1, -1) (1, 1)] ++
    drawMatrixSpline (if b bSplineMatrix overhauserMatrix) 6 ps ++ 
    [GraphRectangle (if (k=n) 12 1) (x-eps, y-eps) (x+eps, y+eps) | (x, y), k <- ps, [0..]]
  )

bSplineMatrix
= [[ 1, 4, 1, 0],
   [-3, 0, 3, 0],
   [ 3,-6, 3, 0],
   [-1, 3,-3, 1]]

overhauserMatrix
= [[ 0, 2, 0, 0],
   [-1, 0, 1, 0],
   [ 2,-5, 4,-1],
   [-1, 3,-3, 1]]

drawMatrixSpline matrix nrSegments ps
= [GraphPolyLine 3 [polynome (n//nrSegments) controlPoints | fourTuple <- fourTuples; controlPoints := matrixProduct factor matrix fourTuple; n <- [0..nrSegments]]]
where
  factor = (sum.hd) matrix
  fourTuples
  = [[p0, p1, p2, p3] | p0, p1, p2, p3 <- l, drop 1 l, drop 2 l, drop 3 l]
  where
    l = take 1 ps ++ ps ++ drop (#ps - 1) ps

matrixProduct factor matrix [(x0, y0), (x1, y1), (x2, y2), (x3, y3)]
= [((m0*x0 + m1*x1 + m2*x2 + m3*x3)//factor, (m0*y0 + m1*y1 + m2*y2 + m3*y3)//factor) | [m0, m1, m2, m3] <- matrix]

polynome t [(x0, y0), (x1, y1), (x2, y2), (x3, y3)]
= (x0+t*(x1+t*(x2+t*x3)), y0+t*(y1+t*(y2+t*y3)))

drawState ::= Spline bool (num, [(num, num)])

object "AmaGraphics" = (Spline True (0, []), call)
where
  call "DefActions" _ state = (state, ["BSpline", "Overhauser", "Delete", "Clear"])

  call "Action" ["BSpline"] (Spline b (n, ps)) = repaint (Spline True (n, ps))
  call "Action" ["Overhauser"] (Spline b (n, ps)) = repaint (Spline False (n, ps))
  call "Action" ["Delete"] (Spline b (n, ps)) = repaint (Spline b (deletePoint (n, ps)))
  call "Action" ["Clear"] (Spline b _ ) = repaint (Spline b (0, []))
  call "Repaint" [] state = repaint state
  call "MouseDown" [x1, y1, x2, y2] (Spline b (n, ps)) = repaint (Spline b (newPoint (atof x1, atof y1) (atof x2, atof y2) (n, ps)))
  call "MouseDrag" [x1, y1, x2, y2] state = (state, graphicsout[GraphPolyLine 15 [(atof x1, atof y1), (atof x2, atof y2)]])
  call _ _ state = (state, [])

  repaint (Spline b (n, ps)) = (Spline b (n, ps), drawSpline b n ps)
  repaint state = (state, [])


