          SwingDesigner
          ===========

        1 Introduction

          SwingDesigner consists of the java-tool Layman which can help in designing 
          a user interface and which can generate the corresponding user interface and application 
          classes.
          SwingDesigner is a variant of AWTDesigner. It uses the same syntax convention but generates javax.swing code.
          It is made by Dick Bruin who was bored of the tedious work of setting up a user interface 
          in java code.
          

        2 Layman

      2.1 Introduction

          Layman is a tool to create a java user interface + application. Layman uses the layout 
          managers of java to create a portable and resizeable user interface. Layout managers have 
          a hierarchical structure, because you add panels to other panels. Layman uses two 
          subclasses of Panel to structure the user interface. These subclasses are called 
          HorizontalPanel and VerticalPanel.
          A HorizontalPanel puts its children beside each other. A VerticalPanel puts its children 
          under each other. You can specify whether a child is resizeable in its parent or not.
          
          Example:
          
          VerticalPanel
            +List 10
            -HorizontalPanel
               -Button "Ok"
               -Button "Cancel"
          
          This describes a VerticalPanel with a resizeable List containing at least 10 lines. Under 
          the List a non-resizeable HorizontalPanel is placed. This panel contains two 
          non-resizeable buttons.
          The "+" tag means that a subcomponent of a panel is resizeable. The "-" tag means that it 
          is not.
          In this example the buttons are non-resizeable in both horizontal and vertical direction. 
          If the HorizontalPanel would have been tagged with a "+" the buttons would have been 
          resizeable in the vertical direction.
          
          An example of a complete description of an application:
          
          App testpackage.Test
            Frame "Names" 100 100 theFrame
              MenuBar
                Menu "File"
                  MenuItem "Open" openMenuItem
                  MenuItem "-"
                  MenuItem "Exit" exitMenuItem
              VerticalPanel
                +List 10 myList
                -HorizontalPanel
                   -Button "Ok" okButton
                   -Button "Cancel" cancelButton
          
          This describes an application called Test which generates the files TestGUI.java and 
          TestApp.java.
          The application consists of a frame with title "Names" at position (100, 100). The frame 
          has a menubar and the already explained panel.
          The names of the elements (i.e. theFrame, openMenuItem, exitMenuItem, myList, okButton, 
          cancelButton) are accessible in the application file TestApp.java.
          
          TestApp looks like this:
          
          package testpackage;
          
          import java.awt.*;
          import javax.swing.*;
          import lib.swing.*;

          /*
          outlets:
            Jframe theFrame;
            JMenuItem openMenuItem;
            JMenuItem exitMenuItem;
            Jlist myList;
            JButton okButton;
            JButton cancelButton;
          actions:
            void openMenuItemClick() {}
            void exitMenuItemClick() {}
            void okButtonClick() {}
            void cancelButtonClick() {}
            void initGUI() {}
          */

          public class TestApp extends TestGUI
          {
            public static void main(String[] args)
            {
              SwingUtilities.invokeLater(new TestApp());
            }

            void theFrameClose()
            {
              theFrame.setVisible(false);
              System.exit(0);
            }
          }    
                     
          You can now define the event handlers (actions) by adding code:
          
          void openMenuItemClick()
          {
            myList.add("open clicked", false);
          }
          
          The base class TestGUI creates the user interface.
          The action named initGUI should contain extra initialisations.
          It is allowed to define a constructor for TestApp, but it may not contain GUI code.
          
          
      2.2 Elements

          Layman recognises the following elements.
          NB: notice the naming convention (no leading J's; not case sensitive). 
          For example Button ".." is mapped to the javax.swing JButton.
          
          App <appname>
          Frame <title> <x> <y> <name>
          Dialog <title> <x> <y> <name>
          HorizontalPanel
          VerticalPanel
          GridPanel
          TabbedPane
          MenuBar
          Menu <title>
          CheckBoxMenuItem <caption>
          MenuItem <caption>
          Button <caption>
          CheckBox <caption>
          ComboBox <caption>
          Label <caption>
          List <nr of lines>
          TableInput <caption>
          TextArea <nr or rows> <nr of columns>
          TextField <caption> <nr of columns>
          PaintBox <width> <height>
          Padding <width> <height>
          
          
          Furthermore menu-items and components can have a name.
          Panels can have a caption, which is used in TabbedPanes.
          Components can have rows and columns in which case a matrix is created.
          
          Examples:
          
          CheckBoxMenuItem "show all" showAllMenuItem
          TextField "" 5 x 3 2
          
          
          The last line means that x is a matrix of 3 by 2 TextFields which have an empty caption 
          and 5 columns.
          
          Components of a gridpanel need a placement indication of the form
          @ <row> <column>
          
          Example:
          
          App Wdk
            -Frame "nrc sudoku" 0 0 theFrame
              MenuBar
                Menu "File"
                  MenuItem "Parameters" openParamsItem
                  MenuItem "-"
                  MenuItem "Exit" exitMenuItem
             +GridPanel
                +TextField "" 2 board 9 9 2 2 @ 0 0
               --Padding 5 5 - 2 2 6 6        @ 5 5
            +Dialog "nrc sudoku" 500 0 params
             -GridPanel
                -ComboBox "symm|free|reset" typeChoice @ 0 1
                -Button "generate" generateButton      @ 0 0
                -Button "check" checkButton            @ 1 0
                -Label "---------" message             @ 1 1
          
          NB: the line describing the matrix of Paddings shows more syntax.
          
          The first dash (-) indicates that the matrix is not resizeable in the vertical direction.
          The second dash (-) indicates that the matrix is not resizeable in the horizontal direction.
          The third dash (-) indicates the absence of a name.
          The pair 2 2 are the <rowcount> and <columncount> of the matrix.
          The pair 6 6 are the <rowstep> and <columnstep> of the matrix.
          The placement indication @ 5 5 are the <rowstart> and <columnstart> of the matrix.      
      
      2.3 Nesting

          The elements of Layman can be nested. There are a few rules about this nesting.
          
          An application consists of one frame and zero or more dialogs.
          A frame consists of an optional menubar and a panel or a component.
          A dialog consists of a panel or a component.
          A menubar consists of zero or more menus.
          A menu consists of zero or more submenus and menu-items.
          A (horizontal/vertical) panel consists of zero or more subpanels and components.
          A TabbedPane consists of one or more subpanels.
          A gridpanel consists of zero or more components with a placement indication.
          A matrix belongs to a gridpanel.
          
          Nesting is indicated by indentation.

      2.4 Special syntax
      
          The dash (-) has special meaning (opposition).
          
          A dash (-) before an App element indicates that the crossplatform look-and-feel should not be used.
          A dash (-) before a Frame or Dialog element indicates that it is initially not visible.
          A dash (-) before another element indicates that it is not resizeable.
          A dash (-) at the position of the name of an element indicates an anonymous element.
          MenuItem "-" indicates a menu separator.
          
          No dash (-) before an element indicates that it is resizeable. For symmetry sake also (+)
          is allowed.
          
          For elements of a gridpanel a double resizeability (vertical and horizontal) can be specified.
          For example (+-) means vertical resizeable and horizontal not resizeable.
          
          The at-symbol (@) is used in the placement indication of elements of a gridpanel.   
          
          A direct subpanel of a TabbedPane needs to have a caption.                 
          

        3 Custom classes

      3.1 JhorizontalPanel

          JhorizontalPanel is a subclass of panel which lays out its children in horizontal 
          direction. Its interface is:
          
          package lib.swing;
          
          public class JhorizontalPanel extends JgridPanel
          {
            public JhorizontalPanel();
            public void add(boolean isResizeable, Component comp);
          }
          
          

      3.2 JverticalPanel

          JverticalPanel is a subclass of panel which lays out its children in vertical direction. 
          Its interface is:
          
          package lib.swing;
          
          public class JverticalPanel extends JgridPanel
          {
            public JverticalPanel();
            public void add(boolean isResizeable, Component comp);
          }
          
          

      3.3 JcomboBox

          JcomboBox is a subclass of JComboBox (note the naming) which is initialised with a string
          containing its items. The items are separated by "|" characters.
          Example: new JcomboBox("one|two|three|four");
          
          Its interface is:
          
          package lib.swing;
          
          public class JcomboBox extends JComboBox
          {
            public JcomboBox(String s);
          }
          
          

      3.4 JtableInput

          JTableInput is a subclass of panel which displays a table. A table consists of some rows. 
          Each row consists of a label and a textfield. At construction the labels can be specified 
          as a string where the labels are separated by ":" characters.
          
          Example: t = new JtableInput("name:address");
          The value of the address-textfield can be retrieved with t.getItemAt(1);
          
          The interface of JtableInput is:
          
          package lib.swing;
          
          public class JtableInput extends JgridPanel
          {
            public static boolean checkBoxEnabled = false;
            public static String trueValue = "true";
            public static String falseValue = "false";
            
            public JtableInput(String caption, int textWidth, int rows);
            public int getItemCount();
            public String getItemAt(int k);
          }
          
                   
          Furthermore the textfields can be initialised by adding initialisers separated by "|" 
          characters.
          
          Example: new JtableInput("name:address:city|Leeuwarden|Groningen|Amsterdam");
          The city field has the initialisers Leeuwarden, Groningen and Amsterdam and will display a 
          ComboBox.
          
          Truth values are more easily entered using checkboxes. By setting JtableInput.checkBoxEnabled to true
          and by specifying the spelling of the truth values a checkbox will be used.
          
          Example: new JtableInput("name:address:city|Leeuwarden|Groningen|Amsterdam:likesJava|true|false");
          NB: both truth values should be mentioned. The first one specifies the initial state.
          

      3.5 JpaintBox

          JpaintBox is a subclass of JPanel which uses a JpaintBoxListener to do its painting and 
          handle its key and mouse events. Its interface is:
          
          package lib.swing;
          
          public class JpaintBox extends JPanel implements KeyListener, MouseListener, MouseMotionListener
          {
            public JpaintBox(int width, int height);
            public void addPaintBoxListener(JpaintBoxListener listener);
            public void display(Seq<Graphic> gs)
          }
          
          
          
          A JpaintBoxListener does the actual painting by calling the display method with the universal
          coordinate system having left-bottom == (-1, -1) and right-top == (1, 1).
          NB: repaint() of a JpaintBox causes onPaint(..) of its JpaintBoxListener to be called.
          
          
          package lib.swing;
          
          public interface JpaintBoxListener
          {
            public void onPaint(JpaintBox p);
            public void onKeyPressed(JpaintBox p, char key);
            public void onMouseDown(JpaintBox p, double x1, double y1, double x2, double y2);
            public void onMouseDrag(JpaintBox p, double x1, double y1, double x2, double y2);
            // coordinates: (-1, -1) .. (1, 1)
            // (x1, y1) is the coordinate where dragging started
            // (x2, y2) is the current coordinate
            // MouseDown indicates the end of a dragging sequence
            // every MouseDrag is called twice to facilitate temporary drawing in XOR mode
          }
          
          

      3.6 Jdialog

          Jdialog is a subclass of JDialog which is part of the framework of SwingDesigner. It 
          translates action events, item events and window closing events into calls to appropriate 
          functions.
          Besides that it has a few static functions to create message-dialogs and forms.
          
          Part of its interface is:
          
          package lib.swing;
          
          public class Jdialog extends JDialog implements Jlistener, ActionListener, ItemListener, WindowListener
          {
            public static String []messageOK = {"Ok"};
            public static String []messageYESNO = {"Yes", "No"};
          
            public static int message(String s, String []buttonLabels, Jframe parent);
            // returns the number of the button or -1 if the dialog is closed  
          
            public static String [] form(String title, String caption, Jframe parent);
            // caption example: prompt1|value21|value22:prompt2:prompt3|value3
            // items are separated by :
            // values are separated by |
            // returns an array of filled in values or null if the dialog is closed  
          
            public static String form(String title, String prompt, String defaultValue, JSframe parent)
            {
              String []result = form(title, prompt + "|" + defaultValue, parent);
              return result == null ? null : result[0];
            }
          }
          
          

      3.7 JgridPanel

          JgridPanel is a subclass of JPanel which lays out its children in a grid. 
          It is a versatile container: JVerticalPanel and JHorizontalPanel are subclasses.

          The resizeability of rows and columns of the grid is subject to the following rule:
          a row is resizeable iff it contains an element which is vertically resizeable
          a column is resizeable iff it contains an element which is horizontally resizeable 
          
          A JGridPanel constructs the smallest grid satisfying its constraints.        
          
          Its interface is:
          
          package lib.swing;
          
          public class JgridPanel extends JPanel
          {
            public static int padx = 1;
            public static int pady = 1;

            public JgridPanel();
            public void add(boolean verResizeable, boolean horResizeable, int row, int col, Component comp)
          }          
          
          
      3.8 Jlist
          
          Jlist is a subclass of JList (note the naming) which acts as a wrapper to facilitate construction.
          
          Its interface is:
          
          package lib.swing;

          public class Jlist extends JList
          {
            public list(int rows);
            public void removeAll();
            public int getItemCount();
            public String getItemAt(int index);
            public boolean isSelectedAt(int index);
            public void add(String item, boolean selected);
          }


      3.9 Jpadding

          Jpadding is a subclass of JgridPanel which is used to fill up space. 
          Its use is to create extra space between components.
          
          Its interface is:
          
          package lib.swing;

          public class Jpadding extends JgridPanel
          {
            public Jpadding(int width, int height);
          }
          
          

